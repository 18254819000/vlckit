From 3865597b78cbb84d7b31bb372725d204d456a3f8 Mon Sep 17 00:00:00 2001
From: Thomas Guillem <thomas@gllm.fr>
Date: Mon, 18 Jun 2018 12:31:13 +0200
Subject: [PATCH 18/18] ffmpeg: backport vtenc patches

---
 ...lboxenc-fix-mutex-cond-leak-in-error.patch |  35 ++++++
 ...videotoolboxenc-split-initialization.patch | 112 ++++++++++++++++++
 ...oolboxenc-fix-invalid-session-on-iOS.patch |  48 ++++++++
 contrib/src/ffmpeg/rules.mak                  |   3 +
 4 files changed, 198 insertions(+)
 create mode 100644 contrib/src/ffmpeg/0001-avcodec-videotoolboxenc-fix-mutex-cond-leak-in-error.patch
 create mode 100644 contrib/src/ffmpeg/0002-avcodec-videotoolboxenc-split-initialization.patch
 create mode 100644 contrib/src/ffmpeg/0003-avcodec-videotoolboxenc-fix-invalid-session-on-iOS.patch

diff --git a/contrib/src/ffmpeg/0001-avcodec-videotoolboxenc-fix-mutex-cond-leak-in-error.patch b/contrib/src/ffmpeg/0001-avcodec-videotoolboxenc-fix-mutex-cond-leak-in-error.patch
new file mode 100644
index 0000000000..0f54eff3a8
--- /dev/null
+++ b/contrib/src/ffmpeg/0001-avcodec-videotoolboxenc-fix-mutex-cond-leak-in-error.patch
@@ -0,0 +1,35 @@
+From 488c99a65b5a2e35b63dc52da51e32400f15c131 Mon Sep 17 00:00:00 2001
+From: Thomas Guillem <thomas@gllm.fr>
+Date: Tue, 29 May 2018 18:04:38 +0200
+Subject: [PATCH 1/3] avcodec/videotoolboxenc: fix mutex/cond leak in error
+ path
+
+The leak could happen when the vtenc_create_encoder() function failed.
+---
+ libavcodec/videotoolboxenc.c | 5 +++--
+ 1 file changed, 3 insertions(+), 2 deletions(-)
+
+diff --git a/libavcodec/videotoolboxenc.c b/libavcodec/videotoolboxenc.c
+index 7796a685c2..9f2a71b15d 100644
+--- a/libavcodec/videotoolboxenc.c
++++ b/libavcodec/videotoolboxenc.c
+@@ -2473,13 +2473,14 @@ static av_cold int vtenc_close(AVCodecContext *avctx)
+ {
+     VTEncContext *vtctx = avctx->priv_data;
+ 
++    pthread_cond_destroy(&vtctx->cv_sample_sent);
++    pthread_mutex_destroy(&vtctx->lock);
++
+     if(!vtctx->session) return 0;
+ 
+     VTCompressionSessionCompleteFrames(vtctx->session,
+                                        kCMTimeIndefinite);
+     clear_frame_queue(vtctx);
+-    pthread_cond_destroy(&vtctx->cv_sample_sent);
+-    pthread_mutex_destroy(&vtctx->lock);
+     CFRelease(vtctx->session);
+     vtctx->session = NULL;
+ 
+-- 
+2.17.1
+
diff --git a/contrib/src/ffmpeg/0002-avcodec-videotoolboxenc-split-initialization.patch b/contrib/src/ffmpeg/0002-avcodec-videotoolboxenc-split-initialization.patch
new file mode 100644
index 0000000000..2ed920f287
--- /dev/null
+++ b/contrib/src/ffmpeg/0002-avcodec-videotoolboxenc-split-initialization.patch
@@ -0,0 +1,112 @@
+From 6c30ec8b4942d8423d6f5ff8cc0632ed326aea27 Mon Sep 17 00:00:00 2001
+From: Thomas Guillem <thomas@gllm.fr>
+Date: Mon, 11 Jun 2018 15:43:56 +0200
+Subject: [PATCH 2/3] avcodec/videotoolboxenc: split initialization
+
+Split vtenc_init() into vtenc_init() (VTEncContext initialization) and
+vtenc_configure_encoder() (creates the vt session).
+
+This commit will allow to restart the vt session while encoding.
+---
+ libavcodec/videotoolboxenc.c | 48 +++++++++++++++++++++---------------
+ 1 file changed, 28 insertions(+), 20 deletions(-)
+
+diff --git a/libavcodec/videotoolboxenc.c b/libavcodec/videotoolboxenc.c
+index 9f2a71b15d..1060055ba5 100644
+--- a/libavcodec/videotoolboxenc.c
++++ b/libavcodec/videotoolboxenc.c
+@@ -1262,19 +1262,16 @@ static int vtenc_create_encoder(AVCodecContext   *avctx,
+     return 0;
+ }
+ 
+-static av_cold int vtenc_init(AVCodecContext *avctx)
++static int vtenc_configure_encoder(AVCodecContext *avctx)
+ {
+     CFMutableDictionaryRef enc_info;
+     CFMutableDictionaryRef pixel_buffer_info;
+     CMVideoCodecType       codec_type;
+     VTEncContext           *vtctx = avctx->priv_data;
+     CFStringRef            profile_level;
+-    CFBooleanRef           has_b_frames_cfbool;
+     CFNumberRef            gamma_level = NULL;
+     int                    status;
+ 
+-    pthread_once(&once_ctrl, loadVTEncSymbols);
+-
+     codec_type = get_cm_codec_type(avctx->codec_id);
+     if (!codec_type) {
+         av_log(avctx, AV_LOG_ERROR, "Error: no mapping for AVCodecID %d\n", avctx->codec_id);
+@@ -1304,8 +1301,6 @@ static av_cold int vtenc_init(AVCodecContext *avctx)
+         if (!get_vt_hevc_profile_level(avctx, &profile_level)) return AVERROR(EINVAL);
+     }
+ 
+-    vtctx->session = NULL;
+-
+     enc_info = CFDictionaryCreateMutable(
+         kCFAllocatorDefault,
+         20,
+@@ -1335,8 +1330,6 @@ static av_cold int vtenc_init(AVCodecContext *avctx)
+         pixel_buffer_info = NULL;
+     }
+ 
+-    pthread_mutex_init(&vtctx->lock, NULL);
+-    pthread_cond_init(&vtctx->cv_sample_sent, NULL);
+     vtctx->dts_delta = vtctx->has_b_frames ? -1 : 0;
+ 
+     get_cv_transfer_function(avctx, &vtctx->transfer_function, &gamma_level);
+@@ -1363,8 +1356,32 @@ static av_cold int vtenc_init(AVCodecContext *avctx)
+                                   pixel_buffer_info,
+                                   &vtctx->session);
+ 
+-    if (status < 0)
+-        goto init_cleanup;
++init_cleanup:
++    if (gamma_level)
++        CFRelease(gamma_level);
++
++    if (pixel_buffer_info)
++        CFRelease(pixel_buffer_info);
++
++    CFRelease(enc_info);
++
++    return status;
++}
++
++static av_cold int vtenc_init(AVCodecContext *avctx)
++{
++    VTEncContext    *vtctx = avctx->priv_data;
++    CFBooleanRef    has_b_frames_cfbool;
++    int             status;
++
++    pthread_once(&once_ctrl, loadVTEncSymbols);
++
++    pthread_mutex_init(&vtctx->lock, NULL);
++    pthread_cond_init(&vtctx->cv_sample_sent, NULL);
++
++    vtctx->session = NULL;
++    status = vtenc_configure_encoder(avctx);
++    if (status) return status;
+ 
+     status = VTSessionCopyProperty(vtctx->session,
+                                    kVTCompressionPropertyKey_AllowFrameReordering,
+@@ -1378,16 +1395,7 @@ static av_cold int vtenc_init(AVCodecContext *avctx)
+     }
+     avctx->has_b_frames = vtctx->has_b_frames;
+ 
+-init_cleanup:
+-    if (gamma_level)
+-        CFRelease(gamma_level);
+-
+-    if (pixel_buffer_info)
+-        CFRelease(pixel_buffer_info);
+-
+-    CFRelease(enc_info);
+-
+-    return status;
++    return 0;
+ }
+ 
+ static void vtenc_get_frame_info(CMSampleBufferRef buffer, bool *is_key_frame)
+-- 
+2.17.1
+
diff --git a/contrib/src/ffmpeg/0003-avcodec-videotoolboxenc-fix-invalid-session-on-iOS.patch b/contrib/src/ffmpeg/0003-avcodec-videotoolboxenc-fix-invalid-session-on-iOS.patch
new file mode 100644
index 0000000000..5e76c4bd97
--- /dev/null
+++ b/contrib/src/ffmpeg/0003-avcodec-videotoolboxenc-fix-invalid-session-on-iOS.patch
@@ -0,0 +1,48 @@
+From 68932bcf2a8edcc7371347f6a4ae0d2211528cef Mon Sep 17 00:00:00 2001
+From: Thomas Guillem <thomas@gllm.fr>
+Date: Mon, 11 Jun 2018 16:17:28 +0200
+Subject: [PATCH 3/3] avcodec/videotoolboxenc: fix invalid session on iOS
+
+Cf. comment. Restart the VT session when the APP goes from foreground to
+background and vice versa.
+---
+ libavcodec/videotoolboxenc.c | 23 +++++++++++++++++++++--
+ 1 file changed, 21 insertions(+), 2 deletions(-)
+
+diff --git a/libavcodec/videotoolboxenc.c b/libavcodec/videotoolboxenc.c
+index 1060055ba5..ac847358ab 100644
+--- a/libavcodec/videotoolboxenc.c
++++ b/libavcodec/videotoolboxenc.c
+@@ -2175,8 +2175,27 @@ static int create_cv_pixel_buffer(AVCodecContext   *avctx,
+ #if TARGET_OS_IPHONE
+     pix_buf_pool = VTCompressionSessionGetPixelBufferPool(vtctx->session);
+     if (!pix_buf_pool) {
+-        av_log(avctx, AV_LOG_ERROR, "Could not get pixel buffer pool.\n");
+-        return AVERROR_EXTERNAL;
++        /* On iOS, the VT session is invalidated when the APP switches from
++         * foreground to background and vice versa. Fetch the actual error code
++         * of the VT session to detect that case and restart the VT session
++         * accordingly. */
++        OSStatus vtstatus;
++
++        vtstatus = VTCompressionSessionPrepareToEncodeFrames(vtctx->session);
++        if (vtstatus == kVTInvalidSessionErr) {
++            CFRelease(vtctx->session);
++            vtctx->session = NULL;
++            status = vtenc_configure_encoder(avctx);
++            if (status == 0)
++                pix_buf_pool = VTCompressionSessionGetPixelBufferPool(vtctx->session);
++        }
++        if (!pix_buf_pool) {
++            av_log(avctx, AV_LOG_ERROR, "Could not get pixel buffer pool.\n");
++            return AVERROR_EXTERNAL;
++        }
++        else
++            av_log(avctx, AV_LOG_WARNING, "VT session restarted because of a "
++                   "kVTInvalidSessionErr error.\n");
+     }
+ 
+     status = CVPixelBufferPoolCreatePixelBuffer(NULL,
+-- 
+2.17.1
+
diff --git a/contrib/src/ffmpeg/rules.mak b/contrib/src/ffmpeg/rules.mak
index 7a3b678370..d0cd900c17 100644
--- a/contrib/src/ffmpeg/rules.mak
+++ b/contrib/src/ffmpeg/rules.mak
@@ -239,6 +239,9 @@ ifdef USE_FFMPEG
 	$(APPLY) $(SRC)/ffmpeg/armv7_fixup.patch
 	$(APPLY) $(SRC)/ffmpeg/dxva_vc1_crash.patch
 	$(APPLY) $(SRC)/ffmpeg/h264_early_SAR.patch
+	$(APPLY) $(SRC)/ffmpeg/0001-avcodec-videotoolboxenc-fix-mutex-cond-leak-in-error.patch
+	$(APPLY) $(SRC)/ffmpeg/0002-avcodec-videotoolboxenc-split-initialization.patch
+	$(APPLY) $(SRC)/ffmpeg/0003-avcodec-videotoolboxenc-fix-invalid-session-on-iOS.patch
 endif
 ifdef USE_LIBAV
 	$(APPLY) $(SRC)/ffmpeg/libav_gsm.patch
-- 
2.17.1

